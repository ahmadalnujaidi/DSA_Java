Calculating Time Complexity of a Polynomial Algorithm:

Given:

    public void print(int n){
        for(int i = 1; i <= n; i++){
            for(int j = 1; j <= n; j++){
                System.out.println("i = " + i + ", j = " + j);
            }
            System.out.println("End of inner loop");
        }
        System.out.println("End of outer loop");
    }


                                                                line no.  |    operations         |   unit time  
                                                                2         |    1+3(n+1)+3n        |   
                                                                2         |    1+3n+3+3n          |   6n + 4

                                                                3         |    n(1+3n+3+3n)       |   6n^2 + 4n
                                                                4         |    n^2(1+1+1)         |   3n^2
                                                                6         |    n(1)               |   n
                                                                8         |    1                  |   1

                                                                T = 6n+4 + 6n^2+4n + 3n^2 + n + 1
                                                                T = 9n^2 + 11n + 5
                                                                Remove lower order terms, and constant multipliers...
                                                                
                                                                Time Complexity = O(n^2)
                                
                            Polynomial Algorithm Graph Image: https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSZIw236nDM6glbFbdJWWiolKFvH_dHGgjejg&s  
OutPut:
i = 1, j = 1
i = 1, j = 2
i = 1, j = 3
End of inner loop
i = 2, j = 1
i = 2, j = 2
i = 2, j = 3
End of inner loop
i = 3, j = 1
i = 3, j = 2
i = 3, j = 3
End of inner loop
End of outer loop

