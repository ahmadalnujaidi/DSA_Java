MOVE ALL ZEROES TO THE END OF AN ARRAY:

Q. Given an array of integers, write a function to move all 0's to end of it while maintaining the relative order
of the non-zero elements.


Example-
    Given array of integers: {0, 1, 0, 4, 12}

Solution-
    {1, 4, 12, 0, 0}

                                public void moveZeros(int[] arr, int n){
                                    int j = 0;
                                    for (int i = 0; i < n; i++) {
                                        if (arr[i] != 0 && arr[j] == 0) {
                                            int temp = arr[i];
                                            arr[i] = arr[j];
                                            arr[j] = temp;
                                        }
                                        if (arr[j] != 0){
                                            j++;
                                        }
                                    }
                                }


arr[] = {8, 1, 0, 2, 1, 0, 3}
index =  0  1  2  3  4  5  6

n = 7; (the length of the array)
i and j are pointers
j = 0; it will focus on the 0 elements
i = 0; it will focus on non zero elements

first iteration: i = 0, j = 0
    1st if: (arr[i] != 0) true, (arr[j] == 0) false.
        2nd if: (arr[j] != 0) true, so we increment j++

second iteration:   i = 1, j = 1
    1st if: (arr[i] != 0) true, (arr[j] == 0) false.
        2nd if: (arr[j] != 0) true, we increment j++

third iteration: i = 2, j = 2
    1st if: (arr[i] != 0) false, we dont continue
        2nd if: (arr[j] != 0) false, we dont increment j

fourth iteration: i = 3, j = 2
    1st if: (arr[i] != 0) true, (arr[j] == 0) true... we perform swap:
    int temp = arr[i] : temp = 2
    arr[i] = arr[j] : arr[3] = 0, then arr[j] = temp : arr[2] = 2;
    arr[j] = 2; because we swapped the element at j with a non zero element
        2nd if: (arr[j] != 0) true, we increment j++        

                            arr[] = {8, 1, 2, 0, 1, 0, 3}

fifth iteration: i = 4, j = 3
    1st if: (arr[i] != 0) true, (arr[j] == 0) true... we perform swap:
    int temp = arr[4] : temp = 1
    arr[i] = arr[j] : arr[4] = 0, then arr[j] = temp : arr[3] = 1;
    arr[j] = 1; because we swapped the element at j with a non zero element
        2nd if: (arr[j] != 0) true, we increment j++    

                            arr[] = {8, 1, 2, 1, 0, 0, 3}

sixth iteration: i = 5, j = 4
    1st if: (arr[i] != 0) false, we dont continue
        2nd if: (arr[j] != 0) false, we dont continue j remains 4

seventh iteration: i = 6, j = 4
     1st if: (arr[i] != 0) true, (arr[j] == 0) true... we perform swap:
     int temp = arr[6] : temp = 3
     arr[i] = arr[j] : arr[6] = 0, then arr[j] = temp : arr[4] = 3;
     arr[j] = 3; because we swapped the element at j with a non zero element
        2nd if: (arr[j] != 0) true, we increment j++

                            arr[] = {8, 1, 2, 1, 3, 0, 0}

eighth iteration: i = 7, j = 5
    for loop exits cause false 7 < 7;

